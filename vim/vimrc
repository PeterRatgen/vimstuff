" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            \| PlugInstall --sync | source $MYVIMRC
            \| endif

call plug#begin('~/.vim/plugged')
    "VimTeX extension for compiling tex documetns 
    Plug 'lervag/vimtex'                                  
    "Surrounding for quoting and parenthesizing
    Plug 'machakann/vim-sandwich'                         
    "Fuzzy search in files systemwide
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }   
    "Fuzzy search in files in vim
    Plug 'junegunn/fzf.vim' 
    "Git commands inside vim
    Plug 'tpope/vim-fugitive'                             
    "Display colors of codes inside .css and .html documents
    Plug 'ap/vim-css-color'                               
    "Bottom line displaying insert and file info
    Plug 'vim-airline/vim-airline'                        
    "Snippets
    Plug 'SirVer/ultisnips'                               
    "Library of snippets for ultisnips
    Plug 'honza/vim-snippets'                             
    "Linting of files
    Plug 'dense-analysis/ale'                             
    "Completion, and language server support
    Plug 'ycm-core/YouCompleteMe'                         
    "Theme
    Plug 'morhetz/gruvbox'                                
    "File tree, if needed
    Plug 'preservim/nerdtree'                             
    "Improve folding, tex is unusable without
    Plug 'Konfekt/FastFold'                               
call plug#end()

"move focus to NERDTreeToggle
nnoremap <leader>n :NERDTreeFocus<CR>   
"launch NERDTree
nnoremap <C-n> :NERDTree<CR>            
"toggle NERDTree
nnoremap <C-t> :NERDTreeToggle<CR>      

"----- Unmap the arrow keys in normal and visual mode
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

"----- Set the copying and pasting from the system clipboard 
nmap <leader>p "+gp
nmap <leader>y "+y

"---- Set the view of indentation and indentation to 2.
filetype indent on
set tabstop=4       "number of spaces a tab counts for
set shiftwidth=4    "number of space arrows count for 
set autoindent      "keep indentation when moving to a new line
set smartindent     "do indentation automatically 
set expandtab       "use spaces instead of tabs

"----- Interface options
set noshowmode      "Remove vim's own statusbar
set relativenumber  "make numbers relative to current position
set number          "Show numbers
set laststatus=2    "always show the statusbar (the one on the bottom)
set confirm         "display confirmation when closing unsaved file
set conceallevel=2  "Conceal textbf and strings in tex

"----- Set the color theme
syntax on                               "Syntax highlighting on
set cursorline                          "Highlight the line on which the cursor is
colorscheme gruvbox                     "Use the gruvbox theme
set background=dark                     "Use the dark theme of gruvbox
let g:gruvbox_contrast_dark='hard'      "Increase the constrast of the them 
let g:airline_theme='gruvbox'           "Use the gruvbox theme for airline

"----- Set aliases to improve efficiency
command W w                     
command Wq wq
command WQ wq

"----- Set shortcuts in LaTeX documents
set tw=80          "set textwidth to 80
""autocmd filetype markdown set tw=80
""autocmd filetype text set tw=80

"----- set the placement of the swap files
set backupdir=~/.backup/,/tmp//
set directory=~/.swp/,/tmp//
set undodir=~/.undo/,/tmp//
set updatetime=300                  "Write the swapfile if nothings is written for 300 millisecs

"Options for folding
nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

"----- set vimtex options
let g:vimtex_fold_enabled = 1
let g:vim_fold_types = {'sections' : {'parse_levels' : 3}} "Fold to subsubsection levels
let g:tex_flavor = 'latex'

"
"----- fzf search in file
"Search in buffer names
nnoremap <silent> <Leader>b :Buffers<CR>
"Search in files in directory
nnoremap <silent> <C-f> :Files<CR>              
"Grep in files in the directory
nnoremap <silent> <Leader>f :Rg<CR>
"Search in current file
nnoremap <silent> <Leader>/ :BLines<CR>
"Search in marks
nnoremap <silent> <Leader>' :Marks<CR>
"Search in commits
nnoremap <silent> <Leader>c :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

"---- Abbreviations
set spell                       "Enable spellchecking
set spelllang=en_gb             "Set language for spellchecking
set modeline                    "Set options in each file

"-- Choose the first suggestion for mistake
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u    

abbr SE Software Engineering
abbr hte the
abbr nad and

"--- Ultisnips options
let g:UltiSnipsExpandTrigger="<c-space>"        
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"--- Auto expansion
inoremap <nowait> " ""<left>
inoremap <nowait> ' ''<left>
inoremap <nowait> ( ()<left>
inoremap <nowait> [ []<left>
inoremap <nowait> { {}<left>
inoremap <nowait> {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

let g:ycm_log_level = 'debug'

"---- YouCompleteMe language servers
let g:ycm_language_server = [
    \ {
    \   'name' : 'texlab' ,
    \   'cmdline' : ['texlab'],
    \   'filetypes' : ['tex']
    \ },
    \ {
    \   'name': 'vue',
    \   'filetypes': [ 'vue' ],
    \   'cmdline': ['vls', '--stdio']
    \ }
\]
