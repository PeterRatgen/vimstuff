" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
  Plug 'lervag/vimtex'                                  "VimTeX extension for compiling tex documetns 
  Plug 'machakann/vim-sandwich'                         "Surrounding for quoting and parenthesizing
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }   "Fuzzy search in files systemwide
  Plug 'junegunn/fzf.vim' " fuzzy search                "Fuzzy search in files in vim
  Plug 'tpope/vim-fugitive'                             "Git commands inside vim
  Plug 'ap/vim-css-color'                               "Display colors of codes inside .css and .html documents
  Plug 'vim-airline/vim-airline'                        "Bottom line displaying insert and file info
  Plug 'SirVer/ultisnips'                               "Snippets
  Plug 'honza/vim-snippets'                             "Library of snippets for ultisnips
  Plug 'dense-analysis/ale'                             "Linting of files
  Plug 'ycm-core/YouCompleteMe'                         "Completion, and language server support
  Plug 'danilo-augusto/vim-afterglow'                   "Theme
  Plug 'preservim/nerdtree'                             "File tree, if needed
call plug#end()

""set completeopt=noinsert,menuone,noselect
set shortmess+=c
set noshowmode      "Remove vim's own statusbar

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

"----- Unmap the arrow keys in normal and visual mode
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"----- Set the copying and pasting from the system clipboard 
nmap <leader>p "+gp
nmap <leader>y "+y

"---- Set the view of indentation and indentation to 2.
filetype indent on
set tabstop=4
set shiftwidth=4
set autoindent
set smartindent
set expandtab

"----- Interface options
set noshowmode
set relativenumber
set number
set laststatus=2 "always show the statusbar (the one on the bottom)
set confirm "display confirmation when closing unsaved file
set conceallevel=2

map <leader>r :Rg<Return>

"----- Set the color theme
syntax on
set cursorline
colorscheme afterglow
let g:afterglow_inherit_background=1
let g:airline_theme='afterglow'

"----- Set aliases to improve efficiency
command W w
command Wq wq
command WQ wq

"----- Set shortcuts in LaTeX documents
autocmd filetype tex set tw=80
autocmd filetype markdown set tw=80
autocmd filetype text set tw=80

"----- set the placement of the swap files
set backupdir=~/.backup/,/tmp//
set directory=~/.swp/,/tmp//
set undodir=~/.undo/,/tmp//

"----- set vimtex options
"let g:vimtex_fold_enabled = 1
"let g:vim_fold_types = {'sections' : {'parse_levels' : 3}}
let g:tex_flavor = 'latex'

set updatetime=300
"
"----- fzf search in file
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <Leader>/ :BLines<CR>
nnoremap <silent> <Leader>' :Marks<CR>
nnoremap <silent> <Leader>c :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

"---- Abbreviations
set spell
set spelllang=da,en_gb
set modeline

"-- Choose the first suggestion for mistake
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

abbr SE Software Engineering
abbr hte the
abbr nad and

"--- Ultisnips options
let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"--- auto expansion
inoremap <nowait> " ""<left>
inoremap <nowait> ' ''<left>
inoremap <nowait> ( ()<left>
inoremap <nowait> [ []<left>
inoremap <nowait> { {}<left>
inoremap <nowait> {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

let g:ycm_log_level = 'debug'

"---- YouCompleteMe
let g:ycm_language_server = [
\ {
\   'name' : 'texlab' ,
\   'cmdline' : ['texlab'],
\   'filetypes' : ['tex']
\ },
\ {
\   'name': 'vue',
\   'filetypes': [ 'vue' ],
\   'cmdline': ['vls', '--stdio']
\ }
\]
